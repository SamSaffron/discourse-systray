#!/usr/bin/env ruby
# frozen_string_literal: true

require "discourse_systray/systray"

module DiscourseSystray
  def self.run
    systray = Systray.new

    if Systray::OPTIONS[:attach]
      begin
        File.open(DiscourseSystemTray::PIPE_PATH, "r") do |pipe|
          while line = pipe.gets
            print line
          end
        end
      rescue Interrupt
        exit 0
      end
      exit 0
    end

    # Register this instance
    File.write(Systray::PID_FILE, Process.pid)

    # Create command pipe
    begin
      File.unlink(Systray::PIPE_PATH)
    rescue StandardError
      nil
    end
    begin
      File.mkfifo(Systray::PIPE_PATH)
    rescue StandardError
      nil
    end

    # Start command listener
    Thread.new do
      File.open(Systray::PIPE_PATH, "r") do |pipe|
        pipe.each_line { |line| systray.handle_command(line.strip) }
      end
    end

    if Systray::OPTIONS[:console]
      Dir.chdir(systray.discourse_path) do
        ps = []
        ps << systray.start_process("bin/ember-cli", console: true)
        ps << systray.start_process("bin/unicorn", console: true)
        # Wait for both processes to finish
        ps.each { |p| p[:thread].join }
      end
    else
      systray.init_systray
      Gtk.main
    end
  end
  end
end

DiscourseSystray.run if $0 == __FILE__
